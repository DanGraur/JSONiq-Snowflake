SELECT object_construct('x', "CENTER", 'y', "COUNT(BUCKET-IDX)") FROM ( SELECT  *  FROM ( SELECT "CENTER", count("bucket-idx") AS "COUNT(BUCKET-IDX)" FROM ( SELECT *, ((("bucket-idx" * 20.0 :: FLOAT) + 10.0 :: FLOAT) + 0.0 :: FLOAT) AS "CENTER" FROM ( SELECT *, floor(("truncated-value" / 20.0 :: FLOAT)) AS "bucket-idx" FROM ( SELECT *, iff(("PT" < 0.0 :: FLOAT), (0.0 :: FLOAT - 10.0 :: FLOAT), iff(("PT" > 2000.0 :: FLOAT), (2000.0 :: FLOAT + 10.0 :: FLOAT), ("PT" - 0.0 :: FLOAT))) AS "truncated-value" FROM ( SELECT * FROM ( SELECT "PT" FROM ( SELECT "EV", any_value("PT") AS "PT" FROM ( SELECT *, MET['pt'] AS "PT" FROM ( SELECT *, event AS "EV" FROM ( SELECT * FROM ( SELECT  *  FROM ( SELECT *, sqrt((((2:: INTEGER * "MUON1"['pt']) * "MUON2"['pt']) * (((exp(("MUON1"['eta'] - "MUON2"['eta'])) + exp(("MUON2"['eta'] - "MUON1"['eta']))) / 2:: INTEGER) - cos(("MUON1"['phi'] - "MUON2"['phi']))))) AS "invariant-mass" FROM ( SELECT * FROM ( SELECT  *  FROM ( SELECT "RUN", "LUMINOSITYBLOCK", "EVENT", "HLT", "PV", "MET", "MUON", "ELECTRON", "TAU", "PHOTON", "JET", "I", "MUON1", "INDEX" AS "J", "MUON2" FROM ( SELECT "RUN", "LUMINOSITYBLOCK", "EVENT", "HLT", "PV", "MET", "MUON", "ELECTRON", "TAU", "PHOTON", "JET", "I", "MUON1", "INDEX", "VALUE" AS "MUON2" FROM ( SELECT "RUN", "LUMINOSITYBLOCK", "EVENT", "HLT", "PV", "MET", "MUON", "ELECTRON", "TAU", "PHOTON", "JET", "I", "MUON1", "INDEX", "VALUE" FROM ( SELECT  *  FROM ( SELECT "RUN", "LUMINOSITYBLOCK", "EVENT", "HLT", "PV", "MET", "MUON", "ELECTRON", "TAU", "PHOTON", "JET", "INDEX" AS "I", "MUON1" FROM ( SELECT "RUN", "LUMINOSITYBLOCK", "EVENT", "HLT", "PV", "MET", "MUON", "ELECTRON", "TAU", "PHOTON", "JET", "INDEX", "VALUE" AS "MUON1" FROM ( SELECT "RUN", "LUMINOSITYBLOCK", "EVENT", "HLT", "PV", "MET", "MUON", "ELECTRON", "TAU", "PHOTON", "JET", "INDEX", "VALUE" FROM ( SELECT  *  FROM ( SELECT  *  FROM ( SELECT  *  FROM (adl)) WHERE (array_size(Muon) > 1:: INTEGER)),  LATERAL  FLATTEN ( INPUT  => Muon,  PATH  => '',  OUTER  => false,  RECURSIVE  => false,  MODE  => 'ARRAY'))))),  LATERAL  FLATTEN ( INPUT  => Muon,  PATH  => '',  OUTER  => false,  RECURSIVE  => false,  MODE  => 'ARRAY'))))) WHERE (("I" < "J") AND ("MUON1"['charge'] <> "MUON2"['charge']))))) WHERE ((60:: INTEGER < "invariant-mass") AND ("invariant-mass" < 120:: INTEGER)))))) GROUP BY "EV")))))) GROUP BY "CENTER") ORDER BY "CENTER" ASC NULLS FIRST);